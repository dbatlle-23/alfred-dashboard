import dash_bootstrap_components as dbc
from dash import html, dcc, dash_table, callback_context
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

def create_asset_detail_modal():
    """
    Crea un modal para mostrar detalles de un asset específico.
    
    Returns:
        dbc.Modal: Componente modal con estructura para mostrar detalles de asset.
    """
    return dbc.Modal(
        [
            dbc.ModalHeader(
                dbc.ModalTitle(id="asset-detail-modal-title"),
                close_button=True,
                className="bg-primary text-white"
            ),
            dbc.ModalBody(id="asset-detail-modal-body", className="p-4"),
            # Store para almacenar datos de la API
            dcc.Store(id="asset-detail-api-data", storage_type="memory"),
            # Store para almacenar información del asset actual
            dcc.Store(id="current-asset-info", storage_type="memory"),
            dbc.ModalFooter(
                dbc.Button(
                    "Cerrar", id="close-asset-detail-modal", className="ms-auto", n_clicks=0
                )
            ),
        ],
        id="asset-detail-modal",
        size="xl",
        is_open=False,
        backdrop="static",
        scrollable=True,
        centered=True,
    )

def create_asset_detail_content(asset_id, month, detail_data, asset_metadata):
    """
    Crea el contenido del modal de detalles de asset.
    
    Args:
        asset_id (str): ID del asset seleccionado.
        month (str): Mes seleccionado en formato 'YYYY-MM'.
        detail_data (pd.DataFrame): DataFrame con los datos detallados del asset.
        asset_metadata (dict): Diccionario con metadatos del asset.
    
    Returns:
        html.Div: Contenido del modal con información detallada del asset.
    """
    # Si no hay datos, mostrar mensaje
    if detail_data is None or detail_data.empty:
        return html.Div([
            html.Div([
                html.H5("Información del Asset", className="card-title"),
                html.Div([
                    html.Strong("ID: "), html.Span(str(asset_id)),
                    html.Br(),
                    html.Strong("Bloque: "), html.Span(str(asset_metadata.get('block_number', 'N/A'))),
                    html.Br(),
                    html.Strong("Escalera: "), html.Span(str(asset_metadata.get('staircase', 'N/A'))),
                    html.Br(),
                    html.Strong("Apartamento: "), html.Span(str(asset_metadata.get('apartment', 'N/A'))),
                ], className="mb-3"),
                # Botón para obtener datos de la API
                html.Div([
                    dbc.Button(
                        [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"],
                        id="fetch-asset-api-data-btn",
                        color="primary",
                        className="mt-2",
                        n_clicks=0,
                        style={"minWidth": "200px"}
                    ),
                    # Spinner para indicar carga
                    dbc.Spinner(id="asset-api-loading", color="primary", size="sm", spinnerClassName="ms-2 d-none"),
                ], className="d-flex align-items-center flex-wrap"),
                # Contenedor para mensajes de la API
                html.Div(id="asset-api-message-container", className="mt-2")
            ], className="card-body"),
            html.Div([
                html.I(className="fas fa-info-circle me-2"),
                html.Span("No hay datos disponibles para este asset en el mes seleccionado.")
            ], className="alert alert-info")
        ], className="card")
    
    # Preparar datos para visualización
    try:
        # Convertir columna de fecha a datetime si existe y asegurar que sea serializable
        if 'date' in detail_data.columns:
            detail_data['date'] = pd.to_datetime(detail_data['date'])
            # Convertir fechas a strings para evitar problemas de serialización
            detail_data['date'] = detail_data['date'].dt.strftime('%Y-%m-%d')
            detail_data = detail_data.sort_values('date')
        
        # Identificar columnas numéricas para gráficos
        numeric_cols = detail_data.select_dtypes(include=[np.number]).columns.tolist()
        date_col = 'date' if 'date' in detail_data.columns else None
        
        # Crear contenido del modal
        content = []
        
        # Sección de información del asset
        content.append(html.Div([
            html.H5("Información del Asset", className="card-title"),
            html.Div([
                html.Strong("ID: "), html.Span(str(asset_id)),
                html.Br(),
                html.Strong("Bloque: "), html.Span(str(asset_metadata.get('block_number', 'N/A'))),
                html.Br(),
                html.Strong("Escalera: "), html.Span(str(asset_metadata.get('staircase', 'N/A'))),
                html.Br(),
                html.Strong("Apartamento: "), html.Span(str(asset_metadata.get('apartment', 'N/A'))),
            ], className="mb-3"),
            # Botón para obtener datos de la API
            html.Div([
                dbc.Button(
                    [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"],
                    id="fetch-asset-api-data-btn",
                    color="primary",
                    className="mt-2",
                    n_clicks=0,
                    style={"minWidth": "200px"}
                ),
                # Spinner para indicar carga
                dbc.Spinner(id="asset-api-loading", color="primary", size="sm", spinnerClassName="ms-2 d-none"),
            ], className="d-flex align-items-center flex-wrap"),
            # Contenedor para mensajes de la API
            html.Div(id="asset-api-message-container", className="mt-2")
        ], className="card-body border-bottom"))
        
        # Sección de gráficos (si hay datos numéricos y fechas)
        if date_col and numeric_cols:
            # Seleccionar hasta 3 columnas numéricas para mostrar en gráficos
            plot_cols = numeric_cols[:3]
            
            # Crear gráfico de línea para cada columna numérica
            for col in plot_cols:
                # Asegurarse de que los datos son serializables
                plot_data = detail_data.copy()
                
                # Convertir a tipos serializables si es necesario
                if pd.api.types.is_datetime64_any_dtype(plot_data[date_col]):
                    plot_data[date_col] = plot_data[date_col].astype(str)
                
                fig = px.line(
                    plot_data, 
                    x=date_col, 
                    y=col,
                    title=f"Evolución de {col}",
                    labels={col: col, date_col: "Fecha"},
                    template="plotly_white"
                )
                fig.update_layout(
                    margin=dict(l=20, r=20, t=40, b=20),
                    height=300,
                    hovermode="x unified"
                )
                content.append(html.Div([
                    dcc.Graph(figure=fig)
                ], className="mb-4"))
        
        # Sección de tabla de datos
        # Asegurarse de que todos los datos son serializables
        table_data = detail_data.copy()
        for col in table_data.columns:
            if pd.api.types.is_datetime64_any_dtype(table_data[col]):
                table_data[col] = table_data[col].astype(str)
            elif pd.api.types.is_period_dtype(table_data[col]):
                table_data[col] = table_data[col].astype(str)
        
        content.append(html.Div([
            html.H5("Datos Detallados", className="mb-3"),
            dash_table.DataTable(
                data=table_data.to_dict('records'),
                columns=[{"name": i, "id": i} for i in table_data.columns],
                style_table={'overflowX': 'auto'},
                style_cell={
                    'textAlign': 'left',
                    'padding': '8px',
                    'minWidth': '100px',
                    'maxWidth': '300px',
                    'whiteSpace': 'normal',
                    'height': 'auto',
                },
                style_header={
                    'backgroundColor': 'rgb(230, 230, 230)',
                    'fontWeight': 'bold'
                },
                style_data_conditional=[
                    {
                        'if': {'row_index': 'odd'},
                        'backgroundColor': 'rgb(248, 248, 248)'
                    }
                ],
                page_size=10,
                sort_action="native",
                filter_action="native",
                export_format="csv",
            )
        ], className="mt-3"))
        
        # Sección para mostrar datos de la API (inicialmente vacía)
        content.append(html.Div(id="asset-api-data-container", className="mt-4"))
        
        return html.Div(content)
    
    except Exception as e:
        import traceback
        print(f"[ERROR] create_asset_detail_content - Error al crear contenido: {str(e)}")
        print(traceback.format_exc())
        
        return html.Div([
            html.Div([
                html.I(className="fas fa-exclamation-triangle me-2"),
                f"Error al procesar datos: {str(e)}"
            ], className="alert alert-danger")
        ])

def register_asset_detail_modal_callbacks(app):
    """
    Registra los callbacks necesarios para el modal de detalles de asset.
    
    Args:
        app (dash.Dash): Aplicación Dash.
    """
    from dash.dependencies import Input, Output, State
    
    @app.callback(
        Output("asset-detail-modal", "is_open"),
        [Input("show-asset-detail-trigger", "data"),
         Input("close-asset-detail-modal", "n_clicks")],
        [State("asset-detail-modal", "is_open")]
    )
    def toggle_asset_detail_modal(trigger_data, close_clicks, is_open):
        """Toggle the asset detail modal."""
        ctx = callback_context
        
        # Logs para depuración
        print(f"[DEBUG] toggle_asset_detail_modal - Contexto de callback: {ctx.triggered}")
        print(f"[DEBUG] toggle_asset_detail_modal - Datos de trigger: {trigger_data}")
        print(f"[DEBUG] toggle_asset_detail_modal - Estado actual del modal: {is_open}")
        
        if not ctx.triggered:
            return is_open
        
        trigger_id = ctx.triggered[0]["prop_id"].split(".")[0]
        print(f"[DEBUG] toggle_asset_detail_modal - ID del trigger: {trigger_id}")
        
        if trigger_id == "show-asset-detail-trigger" and trigger_data:
            print(f"[INFO] toggle_asset_detail_modal - Abriendo modal para asset: {trigger_data.get('asset_id', 'N/A')}, mes: {trigger_data.get('month', 'N/A')}")
            return True
        elif trigger_id == "close-asset-detail-modal":
            print(f"[INFO] toggle_asset_detail_modal - Cerrando modal")
            return False
        
        return is_open
    
    # Callback para guardar información del asset actual cuando se abre el modal
    @app.callback(
        Output("current-asset-info", "data"),
        [Input("show-asset-detail-trigger", "data")],
        prevent_initial_call=True
    )
    def store_current_asset_info(trigger_data):
        """Almacena información del asset actual cuando se abre el modal."""
        print(f"[DEBUG] store_current_asset_info - INICIO DEL CALLBACK")
        print(f"[DEBUG] store_current_asset_info - trigger_data: {trigger_data}")
        
        if trigger_data and 'asset_id' in trigger_data and 'month' in trigger_data:
            result = {
                'asset_id': trigger_data['asset_id'],
                'month': trigger_data['month'],
                'project_id': trigger_data.get('project_id', '')
            }
            print(f"[DEBUG] store_current_asset_info - Almacenando información: {result}")
            return result
            
        print(f"[DEBUG] store_current_asset_info - No hay datos válidos para almacenar")
        return {}
    
    # Callback para obtener datos de la API cuando se hace clic en el botón
    @app.callback(
        [Output("asset-api-data-container", "children"),
         Output("asset-api-message-container", "children"),
         Output("asset-detail-api-data", "data"),
         Output("fetch-asset-api-data-btn", "children", allow_duplicate=True),
         Output("fetch-asset-api-data-btn", "disabled", allow_duplicate=True),
         Output("asset-api-loading", "spinnerClassName", allow_duplicate=True)],
        [Input("fetch-asset-api-data-btn", "n_clicks")],
        [State("current-asset-info", "data"),
         State("jwt-token-store", "data")],
        prevent_initial_call=True
    )
    def fetch_asset_api_data(n_clicks, asset_info, token_data):
        """Obtiene datos del asset desde la API."""
        from utils.error_handlers import handle_exceptions
        import time
        from dash import no_update
        
        # Logs detallados para diagnóstico
        print("="*80)
        print(f"[DEBUG] fetch_asset_api_data - INICIO DEL CALLBACK")
        print(f"[DEBUG] fetch_asset_api_data - n_clicks: {n_clicks}")
        print(f"[DEBUG] fetch_asset_api_data - asset_info: {asset_info}")
        print(f"[DEBUG] fetch_asset_api_data - token_data presente: {token_data is not None}")
        if token_data:
            print(f"[DEBUG] fetch_asset_api_data - token presente: {'token' in token_data}")
        print("="*80)
        
        # Valores por defecto
        empty_return = html.Div(), None, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
        
        # Si no hay clicks, retornar valores por defecto
        if not n_clicks:
            print(f"[DEBUG] fetch_asset_api_data - Saliendo temprano: n_clicks es {n_clicks}")
            return empty_return
        
        # Primero, actualizar el estado del botón para mostrar que está cargando
        button_children = [html.I(className="fas fa-spinner fa-spin me-2"), "Cargando..."]
        button_disabled = True
        spinner_class = "ms-2"
        
        # Si no hay información del asset, retornar error
        if not asset_info:
            print(f"[DEBUG] fetch_asset_api_data - Saliendo temprano: asset_info es None o vacío")
            error_msg = html.Div("No hay información del asset disponible", className="alert alert-warning mt-2")
            return html.Div(), error_msg, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
        if 'asset_id' not in asset_info:
            print(f"[DEBUG] fetch_asset_api_data - Saliendo temprano: 'asset_id' no está en asset_info")
            print(f"[DEBUG] fetch_asset_api_data - Claves en asset_info: {asset_info.keys() if asset_info else 'No hay claves'}")
            error_msg = html.Div("Información del asset incompleta: falta asset_id", className="alert alert-warning mt-2")
            return html.Div(), error_msg, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
        if 'month' not in asset_info:
            print(f"[DEBUG] fetch_asset_api_data - Saliendo temprano: 'month' no está en asset_info")
            print(f"[DEBUG] fetch_asset_api_data - Claves en asset_info: {asset_info.keys() if asset_info else 'No hay claves'}")
            error_msg = html.Div("Información del asset incompleta: falta month", className="alert alert-warning mt-2")
            return html.Div(), error_msg, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
        
        try:
            # Obtener token JWT
            token = token_data.get('token') if token_data else None
            print(f"[DEBUG] fetch_asset_api_data - Token obtenido: {token is not None}")
            
            if not token:
                print(f"[DEBUG] fetch_asset_api_data - Saliendo: No hay token de autenticación disponible")
                return html.Div(), html.Div("No hay token de autenticación disponible", className="alert alert-warning"), {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
            # Obtener información del asset y mes
            asset_id = asset_info['asset_id']
            month = asset_info['month']
            project_id = asset_info.get('project_id', '')
            
            print(f"[DEBUG] fetch_asset_api_data - asset_id: {asset_id}")
            print(f"[DEBUG] fetch_asset_api_data - month: {month}")
            print(f"[DEBUG] fetch_asset_api_data - project_id: {project_id}")
            
            if not project_id:
                print(f"[DEBUG] fetch_asset_api_data - Saliendo: No se pudo determinar el ID del proyecto")
                return html.Div(), html.Div("No se pudo determinar el ID del proyecto", className="alert alert-warning"), {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
            # Convertir el mes a fecha de inicio y fin
            year, month_num = map(int, month.split('-'))
            start_date = datetime(year, month_num, 1).strftime('%Y-%m-%d')
            
            # Calcular el último día del mes
            if month_num == 12:
                end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
            else:
                end_date = datetime(year, month_num + 1, 1) - timedelta(days=1)
            end_date = end_date.strftime('%Y-%m-%d')
            
            # Importar funciones de API
            from utils.api import get_sensors_with_tags, get_daily_readings_for_tag
            
            # Obtener sensores y tags del asset
            print(f"[INFO] fetch_asset_api_data - Obteniendo sensores para asset: {asset_id}")
            print(f"[DEBUG] fetch_asset_api_data - Llamando a get_sensors_with_tags con asset_id={asset_id}")
            try:
                sensors_data = get_sensors_with_tags(asset_id, token)
                print(f"[DEBUG] fetch_asset_api_data - Respuesta de get_sensors_with_tags: {sensors_data is not None}")
                if sensors_data:
                    print(f"[DEBUG] fetch_asset_api_data - Claves en sensors_data: {sensors_data.keys() if isinstance(sensors_data, dict) else 'No es un diccionario'}")
                    print(f"[DEBUG] fetch_asset_api_data - 'tags' en sensors_data: {'tags' in sensors_data if isinstance(sensors_data, dict) else False}")
            except Exception as api_error:
                print(f"[ERROR] fetch_asset_api_data - Error al llamar a get_sensors_with_tags: {str(api_error)}")
                import traceback
                print(traceback.format_exc())
                return html.Div(), html.Div(f"Error al obtener sensores: {str(api_error)}", className="alert alert-danger"), {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
            if not sensors_data or 'tags' not in sensors_data:
                print(f"[DEBUG] fetch_asset_api_data - No se encontraron sensores o 'tags' no está en sensors_data")
                return html.Div(), html.Div("No se encontraron sensores para este asset", className="alert alert-warning"), {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
            
            # Obtener lecturas para cada tag
            all_readings = []
            tags = sensors_data.get('tags', [])
            
            for tag in tags:
                tag_name = tag.get('name')
                if not tag_name:
                    continue
                
                print(f"[INFO] fetch_asset_api_data - Obteniendo lecturas para tag: {tag_name}")
                readings = get_daily_readings_for_tag(
                    asset_id=asset_id,
                    tag_name=tag_name,
                    project_folder=f"data/analyzed_data/{project_id}",
                    token=token
                )
                
                if readings is not None and not readings.empty:
                    # Filtrar por rango de fechas
                    readings['date'] = pd.to_datetime(readings['date'])
                    filtered_readings = readings[
                        (readings['date'] >= start_date) &
                        (readings['date'] <= end_date)
                    ]
                    
                    if not filtered_readings.empty:
                        # Añadir columna con el nombre del tag
                        filtered_readings['tag_name'] = tag_name
                        all_readings.append(filtered_readings)
            
            # Combinar todas las lecturas
            if all_readings:
                combined_df = pd.concat(all_readings, ignore_index=True)
                
                # Convertir fechas a strings para serialización
                combined_df['date'] = combined_df['date'].dt.strftime('%Y-%m-%d')
                
                # Crear tabla con los datos
                api_data_table = dash_table.DataTable(
                    data=combined_df.to_dict('records'),
                    columns=[{"name": i, "id": i} for i in combined_df.columns],
                    style_table={'overflowX': 'auto'},
                    style_cell={
                        'textAlign': 'left',
                        'padding': '8px',
                        'minWidth': '100px',
                        'maxWidth': '300px',
                        'whiteSpace': 'normal',
                        'height': 'auto',
                    },
                    style_header={
                        'backgroundColor': 'rgb(230, 230, 230)',
                        'fontWeight': 'bold'
                    },
                    style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(248, 248, 248)'
                        }
                    ],
                    page_size=10,
                    sort_action="native",
                    filter_action="native",
                    export_format="csv",
                )
                
                # Crear contenido
                api_data_content = html.Div([
                    html.H5("Datos de la API", className="mb-3"),
                    html.Div(f"Se encontraron {len(combined_df)} lecturas para {len(tags)} tags", className="mb-2"),
                    api_data_table
                ])
                
                # Mensaje de éxito
                success_message = html.Div(
                    f"Datos obtenidos correctamente: {len(combined_df)} lecturas para {len(tags)} tags",
                    className="alert alert-success mt-2"
                )
                
                # Guardar datos en el store
                store_data = {
                    'asset_id': asset_id,
                    'month': month,
                    'data': combined_df.to_dict('records')
                }
                
                return api_data_content, success_message, store_data, button_children, button_disabled, spinner_class
            else:
                # No se encontraron lecturas
                warning_message = html.Div(
                    "No se encontraron lecturas para este asset en el período seleccionado",
                    className="alert alert-warning mt-2"
                )
                return html.Div(), warning_message, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
                
        except Exception as e:
            import traceback
            print(f"[ERROR] fetch_asset_api_data - Error: {str(e)}")
            print(traceback.format_exc())
            
            # Mensaje de error
            error_message = html.Div([
                html.I(className="fas fa-exclamation-triangle me-2"),
                f"Error al obtener datos de la API: {str(e)}"
            ], className="alert alert-danger mt-2")
            
            return html.Div(), error_message, {}, [html.I(className="fas fa-sync-alt me-2"), "Obtener datos de la API"], False, "ms-2 d-none"
    
    # Callback para crear visualizaciones a partir de los datos de la API
    @app.callback(
        Output("asset-api-data-container", "children", allow_duplicate=True),
        [Input("asset-detail-api-data", "data")],
        prevent_initial_call=True
    )
    def create_api_data_visualizations(api_data):
        """Crea visualizaciones a partir de los datos de la API."""
        if not api_data or 'data' not in api_data or not api_data['data']:
            return html.Div()
        
        try:
            # Convertir datos a DataFrame
            df = pd.DataFrame(api_data['data'])
            
            # Convertir fecha a datetime
            df['date'] = pd.to_datetime(df['date'])
            
            # Agrupar por tag_name y fecha
            visualizations = []
            
            # Obtener tags únicos
            unique_tags = df['tag_name'].unique()
            
            for tag in unique_tags:
                # Filtrar datos por tag
                tag_data = df[df['tag_name'] == tag]
                
                # Ordenar por fecha
                tag_data = tag_data.sort_values('date')
                
                # Crear gráfico
                fig = px.line(
                    tag_data,
                    x='date',
                    y='value',
                    title=f"Evolución de {tag}",
                    labels={'value': 'Valor', 'date': 'Fecha'},
                    template="plotly_white"
                )
                fig.update_layout(
                    margin=dict(l=20, r=20, t=40, b=20),
                    height=300,
                    hovermode="x unified"
                )
                
                # Añadir gráfico a las visualizaciones
                visualizations.append(html.Div([
                    dcc.Graph(figure=fig)
                ], className="mb-4"))
            
            # Crear contenido
            if visualizations:
                return html.Div([
                    html.H5("Visualizaciones de datos de la API", className="mb-3"),
                    html.Div(visualizations)
                ])
            else:
                return html.Div()
        
        except Exception as e:
            import traceback
            print(f"[ERROR] create_api_data_visualizations - Error: {str(e)}")
            print(traceback.format_exc())
            
            return html.Div([
                html.Div([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"Error al crear visualizaciones: {str(e)}"
                ], className="alert alert-danger mt-2")
            ]) 